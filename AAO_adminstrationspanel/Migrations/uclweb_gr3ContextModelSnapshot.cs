// <auto-generated />
using System;
using AAO_adminstrationspanel.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AAO_adminstrationspanel.Migrations
{
    [DbContext(typeof(uclweb_gr3Context))]
    partial class uclweb_gr3ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Address");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("City");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Country");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("Cvr")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("CVR");

                    b.Property<string>("Fax")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DriverLicenseTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DriverLicenseTypeID");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.DriverLicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DriverLicenseType");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.DriverQualification", b =>
                {
                    b.Property<int>("QualificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("QualificationTypeID");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.HasKey("QualificationTypeId", "DriverId")
                        .HasName("PK__DriverQu__370CC382AD3C09EB");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverQualification");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.QualificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("QualificationType");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Scheduler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Scheduler");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EndCountryId")
                        .HasColumnType("int")
                        .HasColumnName("EndCountryID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Priority")
                        .HasColumnType("bit");

                    b.Property<int?>("StartCountryId")
                        .HasColumnType("int")
                        .HasColumnName("StartCountryID");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int?>("TravelTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EndCountryId");

                    b.HasIndex("StartCountryId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.TripUser", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("TripID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool?>("Assigned")
                        .HasColumnType("bit");

                    b.HasKey("TripId", "UserId")
                        .HasName("PK__TripUser__80A4FDD410E8D8F1");

                    b.HasIndex("UserId");

                    b.ToTable("TripUser");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LoginId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Address", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Address__CityID__29572725");

                    b.Navigation("City");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.City", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__City__CountryID__267ABA7A");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Department", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Address", "Address")
                        .WithMany("Departments")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__Departmen__Addre__2E1BDC42");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Driver", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.DriverLicenseType", "DriverLicenseType")
                        .WithMany("Drivers")
                        .HasForeignKey("DriverLicenseTypeId")
                        .HasConstraintName("FK__Driver__DriverLi__440B1D61");

                    b.HasOne("AAO_adminstrationspanel.Models.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Driver__UserID__4316F928");

                    b.Navigation("DriverLicenseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.DriverQualification", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Driver", "Driver")
                        .WithMany("DriverQualifications")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK__DriverQua__Drive__49C3F6B7")
                        .IsRequired();

                    b.HasOne("AAO_adminstrationspanel.Models.QualificationType", "QualificationType")
                        .WithMany("DriverQualifications")
                        .HasForeignKey("QualificationTypeId")
                        .HasConstraintName("FK__DriverQua__Quali__48CFD27E")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("QualificationType");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Scheduler", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Department", "Department")
                        .WithMany("Schedulers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Scheduler__Depar__3E52440B");

                    b.HasOne("AAO_adminstrationspanel.Models.User", "User")
                        .WithMany("Schedulers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Scheduler__UserI__3D5E1FD2");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Trip", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.User", "Contact")
                        .WithMany("Trips")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK__Trip__ContactID__37A5467C");

                    b.HasOne("AAO_adminstrationspanel.Models.Department", "Department")
                        .WithMany("Trips")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Trip__Department__38996AB5");

                    b.HasOne("AAO_adminstrationspanel.Models.Country", "EndCountry")
                        .WithMany("TripEndCountries")
                        .HasForeignKey("EndCountryId")
                        .HasConstraintName("FK__Trip__EndCountry__3A81B327");

                    b.HasOne("AAO_adminstrationspanel.Models.Country", "StartCountry")
                        .WithMany("TripStartCountries")
                        .HasForeignKey("StartCountryId")
                        .HasConstraintName("FK__Trip__StartCount__398D8EEE");

                    b.Navigation("Contact");

                    b.Navigation("Department");

                    b.Navigation("EndCountry");

                    b.Navigation("StartCountry");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.TripUser", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Trip", "Trip")
                        .WithMany("TripUsers")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__TripUser__TripID__4CA06362")
                        .IsRequired();

                    b.HasOne("AAO_adminstrationspanel.Models.User", "User")
                        .WithMany("TripUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TripUser__UserID__4D94879B")
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.User", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__User__AddressID__34C8D9D1");

                    b.HasOne("AAO_adminstrationspanel.Models.Login", "Login")
                        .WithMany("Users")
                        .HasForeignKey("LoginId")
                        .HasConstraintName("FK__User__LoginID__33D4B598");

                    b.HasOne("AAO_adminstrationspanel.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__32E0915F");

                    b.Navigation("Address");

                    b.Navigation("Login");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AAO_adminstrationspanel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AAO_adminstrationspanel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Address", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("TripEndCountries");

                    b.Navigation("TripStartCountries");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Department", b =>
                {
                    b.Navigation("Schedulers");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Driver", b =>
                {
                    b.Navigation("DriverQualifications");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.DriverLicenseType", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Login", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.QualificationType", b =>
                {
                    b.Navigation("DriverQualifications");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.Trip", b =>
                {
                    b.Navigation("TripUsers");
                });

            modelBuilder.Entity("AAO_adminstrationspanel.Models.User", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Schedulers");

                    b.Navigation("Trips");

                    b.Navigation("TripUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
